---

# Run the playbook using:
# ansible-playbook -i localhost, r-ci.yml

# Use the 'sysreqs' variable to specify a comma separated list of
# system requirements that must be present.
# Example:
# ansible-playbook -i localhost, --extra-vars "sysreqs=gdal-devel,geos-devel,proj-devel,sqlite-devel" r-ci.yml

# Default is to run static code analysis of the R code using lintr.
# Set 'r_ci_lintr=false' to disable this check.
# Example:
# ansible-playbook -i localhost, --extra-vars "r_ci_lintr=false" r-ci.yml

# Use the 'r_ci_covr' variable to run covr on a package and specify
# the target for the code coverage report.
# Valid targets are:
#   - azure: output the result so it is available on Azure Pipelines
#   - codecov: upload the result to codecov.io
#   - coveralls: upload the result to coveralls
#   - gitlab:  create report for GitLab
#   - standalone: output the result 'covr.html'
# Example, run code coverage and output the result to 'covr.html':
# ansible-playbook -i localhost, --extra-vars "r_ci_covr=standalone" r-ci.yml

# Use raw to disable tag processing {% raw %}

- name: Run the playbook to check the package
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    r_ci_build_args: --no-build-vignettes --no-manual
    r_ci_check_args: --ignore-vignettes --no-manual --no-stop-on-test-error --as-cran
    r_ci_lintr: true
    r_ci_repos: https://cloud.r-project.org

  tasks:
    - name: Check if R is installed
      ansible.builtin.command:
        cmd: R --version
      register: is_r_installed
      changed_when: false
      failed_when: false
      become: false

    - name: Install R
      ansible.builtin.dnf:
        name:
          - devscripts-checkbashisms
          - dnf-command(copr)
          - R
          - tidy
        state: present
      become: true
      when: is_r_installed.rc != 0

    - name: Install system requirements
      ansible.builtin.dnf:
        name: "{{ sysreqs.split(',') }}"
        state: present
      become: true
      when: sysreqs is defined

    - name: Enable the iucar/cran Copr repo
      ansible.builtin.command:
        cmd: dnf --assumeyes copr enable iucar/cran
      become: true
      when: is_r_installed.rc != 0

    - name: Setup Copr to install binary R packages
      ansible.builtin.dnf:
        name: R-CoprManager
        state: present
      become: true
      when: is_r_installed.rc != 0

    - name: Determine the package name from the DESCRIPTION file
      ansible.builtin.command:
        cmd: >
          Rscript --vanilla
          -e "x <- tryCatch(read.dcf('DESCRIPTION', 'Package'), error = function(e) NULL)"
          -e "if (is.null(x)) quit(save = 'no', status = 1, runLast = FALSE)"
          -e "cat(x)"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_name
      changed_when: false
      become: false

    - name: Determine the package version from the DESCRIPTION file
      ansible.builtin.command:
        cmd: >
          Rscript --vanilla
          -e "x <- tryCatch(read.dcf('DESCRIPTION', 'Version'), error = function(e) NULL)"
          -e "if (is.null(x)) quit(save = 'no', status = 1, runLast = FALSE)"
          -e "cat(x)"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_version
      changed_when: false
      become: false

    - name: Install package dependencies
      ansible.builtin.command:
        cmd: >
          Rscript
          -e "fields <- c('Imports', 'Depends', 'Suggests')"
          -e "x <- tryCatch(read.dcf('DESCRIPTION', fields), error = function(e) NULL)"
          -e "if (is.null(x)) quit(save = 'no', status = 1, runLast = FALSE)"
          -e "x <- trimws(unlist(strsplit(as.character(x), ',')))"
          -e "x <- vapply(strsplit(x, ' '), '[[', character(1), 1)"
          -e "x <- unique(x[x != 'R'])"
          -e "x <- x[!(x %in% installed.packages()[, 1])]"
          -e "if (length(x)) install.packages(x, repos = '{{ r_ci_repos }}')"
          -e "cat(length(x) > 0)"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_dependencies
      changed_when: "'TRUE' in pkg_dependencies.stdout"
      become: false

    - name: Build the package
      ansible.builtin.command:
        cmd: "R CMD build {{ r_ci_build_args }} ."
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_build_log
      changed_when: false
      failed_when: false
      become: false

    - name: Display the package build log
      ansible.builtin.debug:
        msg: "{{ pkg_build_log.stdout_lines + pkg_build_log.stderr_lines }}"
      failed_when: pkg_build_log.rc != 0
      become: false

    - name: Check the package
      ansible.builtin.command:
        cmd: "R CMD check {{ r_ci_check_args }} {{ pkg_name.stdout }}_{{ pkg_version.stdout }}.tar.gz"
        chdir: "{{ lookup('env', 'PWD') }}"
      environment:
        _R_CHECK_CRAN_INCOMING_: "FALSE"
        _R_CHECK_SYSTEM_CLOCK_: "FALSE"
      register: pkg_check
      changed_when: false
      failed_when: false
      become: false

    # FIXME: Fails for unknown reason on Azure Pipeline.
    # - name: Read the package install log
    #   ansible.builtin.command:
    #     cmd: "cat {{ pkg_name.stdout }}.Rcheck/00install.out"
    #     chdir: "{{ lookup('env', 'PWD') }}"
    #   register: pkg_install_log
    #   changed_when: false
    #   become: false

    # - name: Display the package install log
    #   ansible.builtin.debug:
    #     msg: "{{ pkg_install_log.stdout_lines }}"
    #   changed_when: false
    #   become: false

    - name: Read the package check log
      ansible.builtin.command:
        cmd: "cat {{ pkg_name.stdout }}.Rcheck/00check.log"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_check_log
      changed_when: false
      become: false

    - name: Display the package check log
      ansible.builtin.debug:
        msg: "{{ pkg_check_log.stdout_lines }}"
      failed_when: pkg_check.rc != 0 or "WARNING" in pkg_check_log.stdout
      become: false

    - name: Check if lintr is installed
      ansible.builtin.command:
        cmd: Rscript -e "cat(any(installed.packages()[, 1] == 'lintr'))"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: is_lintr_installed
      changed_when: false
      become: false
      when: r_ci_lintr | bool

    - name: Install lintr
      ansible.builtin.command:
        cmd: Rscript -e "install.packages('lintr', repos = '{{ r_ci_repos }}')"
        chdir: "{{ lookup('env', 'PWD') }}"
      become: false
      when: r_ci_lintr | bool and is_lintr_installed.stdout == "FALSE"

    - name: Install package
      ansible.builtin.command:
        cmd: "R CMD INSTALL {{ pkg_name.stdout }}_{{ pkg_version.stdout }}.tar.gz"
        chdir: "{{ lookup('env', 'PWD') }}"
      become: false
      when: r_ci_lintr | bool

    - name: Static code analysis of R code using lintr
      ansible.builtin.command:
        cmd: >
          Rscript
          -e "library(lintr)"
          -e "result <- lint_package()"
          -e "print(result)"
          -e "quit(save = 'no', status = length(result) > 0)"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: pkg_lintr_log
      changed_when: false
      failed_when: false
      become: false
      when: r_ci_lintr | bool

    - name: Display the package lintr log
      ansible.builtin.debug:
        msg: "{{ pkg_lintr_log.stdout_lines }}"
      failed_when: pkg_lintr_log.rc != 0
      become: false
      when: r_ci_lintr | bool

    - name: Check if covr is installed
      ansible.builtin.command:
        cmd: Rscript -e "cat(any(installed.packages()[, 1] == 'covr'))"
        chdir: "{{ lookup('env', 'PWD') }}"
      register: is_covr_installed
      changed_when: false
      become: false
      when: r_ci_covr is defined

    - name: Install covr
      ansible.builtin.command:
        cmd: Rscript -e "install.packages('covr', repos = '{{ r_ci_repos }}')"
        chdir: "{{ lookup('env', 'PWD') }}"
      become: false
      when: r_ci_covr is defined and is_covr_installed.stdout == "FALSE"

    - name: Run code coverage
      ansible.builtin.command:
        cmd: >
          Rscript
          -e "library(covr)"
          -e "targets <- c('azure', 'codecov', 'coveralls', 'gitlab', 'standalone')"
          -e "target <- match.arg('{{ r_ci_covr }}', targets)"
          -e "switch(target,"
          -e "       azure = azure(),"
          -e "       codecov = codecov(),"
          -e "       coveralls = coveralls(),"
          -e "       gitlab = gitlab(),"
          -e "       standalone = report(file = 'covr.html'))"
        chdir: "{{ lookup('env', 'PWD') }}"
      changed_when: false
      become: false
      when: r_ci_covr is defined

# {% endraw %}
